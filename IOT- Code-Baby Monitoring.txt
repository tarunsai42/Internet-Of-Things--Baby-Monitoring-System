#include <DHT.h> 
#include <WiFi.h>
#include "heltec.h"
#include "HTTPClient.h"
 
#define DHT_SENSOR_PIN  27 // ESP32 pin GIOP21 connected to DHT22 sensor 
#define DHT_SENSOR_TYPE DHT22 

const char* ssid = "Deepa Bathala"; //wifi name
const char* password = "Deepa123"; // wifi password
String GOOGLE_SCRIPT_ID = "1DCPjRGtHPCeH4GWoUMn-lGuv_4NbyIOjc9p35TImoiA"; 
 
DHT dht_sensor(DHT_SENSOR_PIN, DHT_SENSOR_TYPE); 
  
float currentTempC = 0.0; 
float currentTempF = 0.0; 
float currentHumidity = 0.0; 
 

// LCD display function 

  
void displayReadingsOnOled() { 
    
  String FtemperatureDisplay ="Temperature: " + (String)currentTempF +  "째F"; 
  String CtemperatureDisplay ="Temperature: " + (String)currentTempC +  "째C"; 
  String humidityDisplay = "Humidity: " + (String)currentHumidity + "%"; 
  
  // Clear the OLED screen 
  Heltec.display->clear(); 
  // Prepare to display temperatureF 
  Heltec.display->drawString(0, 0, FtemperatureDisplay); 
  // Prepare to display temperatureC 
  Heltec.display->drawString(0, 12, CtemperatureDisplay); 
  // Prepare to display humidity 
  Heltec.display->drawString(0, 24, humidityDisplay); 
  // Display the readings 
  Heltec.display->display(); 
} 
 
// put your setup code here, to run once: 
const int sendInterval = 50;
//WiFiClientSecure client;
 
void setup() 
{ 
  
  // Serial Monitor to start 
  Serial.begin(115200); 
 
  // initialize the DHT sensor 
  dht_sensor.begin();  
 
  // LED light on  
  pinMode(LED,OUTPUT); 
  digitalWrite(LED,HIGH); 
 
 // Start Heltec specific LCD display 
  
  Heltec.begin(true /*DisplayEnable Enable*/, /*false*/ /*LoRa Enable*/, /*false*/ /*Serial Enable*/); 
  currentTempC = dht_sensor.readTemperature(); 
  currentTempF = dht_sensor.readTemperature(true); 
  currentHumidity = dht_sensor.readHumidity(); 
  displayReadingsOnOled(); 

  delay(1000);
WiFi.mode(WIFI_STA);
WiFi.begin(ssid,password);
Serial.print("Connecting to WI-FI");
while(WiFi.status()!= WL_CONNECTED){
 digitalWrite(2,LOW);
delay(5000);
Serial.print(".");
digitalWrite(2,HIGH);
delay(5000);
}
Serial.println("OK");
} 
  
// put your main code here, to run repeatedly: 
     
void loop() 
{ 
   
  // read humidity 
  float humi  = dht_sensor.readHumidity(); 
  // read temperature in Celsius 
  float tempC = dht_sensor.readTemperature(); 
  // read temperature in Fahrenheit 
  float tempF = dht_sensor.readTemperature(true); 
 
  // check whether the reading is successful or not 
  // display on the Serial Monitor (Check the specific COM port and baud number) 
   
  if ( isnan(tempC) || isnan(tempF) || isnan(humi)) { 
    Serial.println("Failed to read from DHT sensor!"); 
  } else { 
    Serial.print("Humidity: "); 
    Serial.print(humi); 
    Serial.print("%"); 
 
    Serial.print("  |  "); 
 
    Serial.print("Temperature: "); 
    Serial.print(tempC); 
    Serial.print("째C  ~  "); 
    Serial.print(tempF); 
    Serial.println("째F"); 
 
// Now Update Heltec Specific LCD monitor 
 
    currentTempC = tempC; 
    currentTempF = tempF; 
    currentHumidity = humi; 
    displayReadingsOnOled(); 
     
write_google_sheet("value1="+String(humi)+"&value2="+String(tempF)+"&value3="+"Deepa");
  } 
     
  // wait a 40 seconds between readings 
  delay(20000); 
}

void write_google_sheet(String params){
 HTTPClient http;
String url="https://docs.google.com/spreadsheets/d/1DCPjRGtHPCeH4GWoUMn-lGuv_4NbyIOjc9p35TImoiA/edit#gid=0"+GOOGLE_SCRIPT_ID+"/exec?"+params;
Serial.println(url);
Serial.println("Updating Temperature & Humidity Status");
http.begin(url.c_str());
http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
int httpCode = http.GET();
Serial.print("HTTP Status Code: ");
Serial.println(httpCode);

String payload;
if(httpCode>99){
payload=http.getString();
Serial.println("Payload: "+payload);
}
http.end();
}

----------------------------------------------------
#include "esp_camera.h"
#include <WiFi.h>

//
// WARNING!!! PSRAM IC required for UXGA resolution and high JPEG quality
//            Ensure ESP32 Wrover Module or other board with PSRAM is selected
//            Partial images will be transmitted if image exceeds buffer size
//
//            You must select partition scheme from the board menu that has at least 3MB APP space.
//            Face Recognition is DISABLED for ESP32 and ESP32-S2, because it takes up from 15 
//            seconds to process single frame. Face Detection is ENABLED if PSRAM is enabled as well

// ===================
// Select camera model
// ===================
//#define CAMERA_MODEL_WROVER_KIT // Has PSRAM
//#define CAMERA_MODEL_ESP_EYE // Has PSRAM
//#define CAMERA_MODEL_ESP32S3_EYE // Has PSRAM
//#define CAMERA_MODEL_M5STACK_PSRAM // Has PSRAM
//#define CAMERA_MODEL_M5STACK_V2_PSRAM // M5Camera version B Has PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE // Has PSRAM
//#define CAMERA_MODEL_M5STACK_ESP32CAM // No PSRAM
//#define CAMERA_MODEL_M5STACK_UNITCAM // No PSRAM
#define CAMERA_MODEL_AI_THINKER // Has PSRAM
//#define CAMERA_MODEL_TTGO_T_JOURNAL // No PSRAM
// ** Espressif Internal Boards **
//#define CAMERA_MODEL_ESP32_CAM_BOARD
//#define CAMERA_MODEL_ESP32S2_CAM_BOARD
//#define CAMERA_MODEL_ESP32S3_CAM_LCD

#include "camera_pins.h"

// ===========================
// Enter your WiFi credentials
// ===========================
const char* ssid = "DeepaandGnanesh";
const char* password = "Welcometofamily143";

void startCameraServer();

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_UXGA;
  config.pixel_format = PIXFORMAT_JPEG; // for streaming
  //config.pixel_format = PIXFORMAT_RGB565; // for face detection/recognition
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 12;
  config.fb_count = 1;
  
  // if PSRAM IC present, init with UXGA resolution and higher JPEG quality
  //                      for larger pre-allocated frame buffer.
  if(config.pixel_format == PIXFORMAT_JPEG){
    if(psramFound()){
      config.jpeg_quality = 10;
      config.fb_count = 2;
      config.grab_mode = CAMERA_GRAB_LATEST;
    } else {
      // Limit the frame size when PSRAM is not available
      config.frame_size = FRAMESIZE_SVGA;
      config.fb_location = CAMERA_FB_IN_DRAM;
    }
  } else {
    // Best option for face detection/recognition
    config.frame_size = FRAMESIZE_240X240;
#if CONFIG_IDF_TARGET_ESP32S3
    config.fb_count = 2;
#endif
  }

#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif

  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  sensor_t * s = esp_camera_sensor_get();
  // initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1); // flip it back
    s->set_brightness(s, 1); // up the brightness just a bit
    s->set_saturation(s, -2); // lower the saturation
  }
  // drop down frame size for higher initial frame rate
  if(config.pixel_format == PIXFORMAT_JPEG){
    s->set_framesize(s, FRAMESIZE_QVGA);
  }

#if defined(CAMERA_MODEL_M5STACK_WIDE) || defined(CAMERA_MODEL_M5STACK_ESP32CAM)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif

#if defined(CAMERA_MODEL_ESP32S3_EYE)
  s->set_vflip(s, 1);
#endif

  WiFi.begin(ssid, password);
  WiFi.setSleep(false);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  startCameraServer();

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
}

void loop() {
  // Do nothing. Everything is done in another task by the web server
  delay(10000);
}
--------------------------------------------
const int trigPin = 5;
const int echoPin = 18;

//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

long duration;
float distanceCm;
float distanceInch;

void setup() {
  Serial.begin(115200); // Starts the serial communication
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
}

void loop() {
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;
  
  // Prints the distance in the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);
  Serial.print("Distance (inch): ");
  Serial.println(distanceInch);
  
  delay(1000);
}